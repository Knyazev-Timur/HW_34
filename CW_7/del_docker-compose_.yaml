version: "3.9"

services:
  frontend:
    image: sermalenk/skypro-front:lesson-34
    container_name: frontend
    ports:
      - "80:80"
    restart: always
    depends_on:
      - api


  api:
    build: . # тут одну точку или вот так еще можно ''./''
      # dockerfile: Dockerfile # тут не уверен что уж нужно
    # Задание имени контейнера для сервиса django
#    container_name:
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    # Рестарт я делал уже на деплой на сервер
    # restart: always
#    env_file:
#      - ./../.env
#      - .:/app/.env # тут по суте должен быть путь который указан в Dockerfile
    # Для работы с переменным окружением
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
#      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
#      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      db:
        condition: service_healthy


#  migrations:
#    build:
#      context: .
#    container_name: migrations
##    environment:
##      DB_HOST: db
##      DB_PORT: 5432
##      DB_NAME: ${DB_NAME}
##      DB_USER: ${DB_USER}
##      DB_PASSWORD: ${DB_PASSWORD}
#    depends_on:
#      api:
#        condition: service_started
#      db:
#        condition: service_healthy
#    command: python manage.py migrate

  db:
    # Использование готового образа postgres
    image: postgres:15.2
    # Задание переменных окружения для контейнера с postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    restart: always
     # Задание имени контейнера для сервиса db
    container_name: db
     # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
      - db_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      # test: ["CMD-SHELL", "pg_isready -U ${SQL_DB_USER} -d ${SQL_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 15

volumes:
  db_data:
  frontend:
